#!/usr/bin/env python

from __future__ import absolute_import
import sys, os.path, logging, argparse, time, os, sys, json, multiprocessing
from sentry import core
from sentry import errors
from sentry import benchmark
from sentry import __version__ as ver
from sentry import tagline, LOG_FORMAT

log = logging.getLogger('sentry')


def main():
    if len(sys.argv) == 1:
        sys.argv.append('-h')

    parser = argparse.ArgumentParser(description=tagline, epilog='run ./sentry --config FILENAME to start server')

    parser.add_argument('--verbose', '-v', action='store_true', default=False)
    parser.add_argument('--config', '-c', action='store', help='config file location')
    parser.add_argument('--benchmark', '-b', action='store_true', help='runs sentry performance benchmark')

    # benchmark options:
    group = parser.add_argument_group('benchmark options')
    group.add_argument('-s','--server', help='server:port to test')
    group.add_argument('-n','--concurrency', default=multiprocessing.cpu_count(), help='defaults to the number of available cpus')
    group.add_argument('-l','--limit', help='limits test run to a specific number of lookups', default=0, type=int)

    options = parser.parse_args()

    handler = logging.StreamHandler()
    formatter = logging.Formatter(LOG_FORMAT,datefmt='%m/%d/%Y %H:%M:%S')
    handler.setFormatter(formatter)
    log.addHandler(handler)
    log.setLevel(logging.INFO)

    if options.verbose:
        log.setLevel(logging.DEBUG)

    log.debug('running in debug mode - version: %s' % ver)

    if options.benchmark:
        if options.server is None:
            print('please specify the server to benchmark with --server')
            sys.exit(1)

        b = benchmark.SentryBenchmark(server=options.server,workers=int(options.concurrency), limit=options.limit)
        b.start()
        sys.exit(0)

    if options.config is None:
        print('sentry needs a config, please do --config $FILENAME ')
        sys.exit(1)


    if not os.path.exists(options.config):
        print('config file %s does not exist' % options.config)
        sys.exit(1)

    log.info('using config: %s' % options.config)

    try:
        sentry = core.Sentry(json.load(open(options.config)))
        sentry.start()

    except errors.Error,v:
        log.debug(v)
        print('error: %s' % v)

    except ValueError as v:
        log.fatal('syntax error in json file:')
        raise v

if __name__ == '__main__':
    main()
